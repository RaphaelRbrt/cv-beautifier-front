name: CV Beautifier Frontend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 20
  WORKDIR: ./

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKDIR }}
        run: npm i

      - name: Type check
        working-directory: ${{ env.WORKDIR }}
        run: npm run type-check

      - name: Lint
        working-directory: ${{ env.WORKDIR }}
        run: npm run lint

      - name: Check formatting
        working-directory: ${{ env.WORKDIR }}
        run: npm run format:check

  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKDIR }}
        run: npm i

      - name: Build project
        working-directory: ${{ env.WORKDIR }}
        env:
          NODE_ENV: production
        run: npm run build

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    environment:
      name: staging
      url: https://staging.cv-beautifier.com

    steps:
      - uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=staging-${{ github.sha }}
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/cv-beautifier-front:${IMAGE_TAG}
          IMAGE_STAGING=${{ secrets.DOCKER_USERNAME }}/cv-beautifier-front:staging
          docker build -t $IMAGE_NAME -t $IMAGE_STAGING .
          docker push $IMAGE_NAME
          docker push $IMAGE_STAGING
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_STAGING=$IMAGE_STAGING" >> $GITHUB_ENV

      - name: Trigger remote deploy to staging
        env:
          WEBHOOK_TOKEN: ${{ secrets.CVBEAUTIFIER_WEBHOOK_TOKEN }}
          VPS_SERVER: ${{ secrets.CVBEAUTIFIER_VPS_SERVER }}
        run: |
          curl -sS ${VPS_SERVER}/healthz
          echo "ðŸš€ Deploying to staging..."
          curl -sS -X POST ${VPS_SERVER}/deploy \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${WEBHOOK_TOKEN}" \
            -d "{\"deployment\":\"cv-beautifier-front-deployment\",\"namespace\":\"staging\",\"restart\":true,\"environment\":\"staging\"}"
          echo "âœ… Staging deployment complete"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    environment:
      name: production
      url: https://cv-beautifier.com

    steps:
      - uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=prod-${{ github.sha }}
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/cv-beautifier-front:${IMAGE_TAG}
          IMAGE_LATEST=${{ secrets.DOCKER_USERNAME }}/cv-beautifier-front:latest
          docker build -t $IMAGE_NAME -t $IMAGE_LATEST .
          docker push $IMAGE_NAME
          docker push $IMAGE_LATEST
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_LATEST=$IMAGE_LATEST" >> $GITHUB_ENV

      - name: Trigger remote deploy to production
        env:
          WEBHOOK_TOKEN: ${{ secrets.CVBEAUTIFIER_WEBHOOK_TOKEN }}
          VPS_SERVER: ${{ secrets.CVBEAUTIFIER_VPS_SERVER }}
        run: |
          curl -sS ${VPS_SERVER}/healthz
          echo "ðŸš€ Deploying to production..."
          curl -sS -X POST ${VPS_SERVER}/deploy \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${WEBHOOK_TOKEN}" \
            -d "{\"deployment\":\"cv-beautifier-front-deployment\",\"namespace\":\"production\",\"restart\":true,\"environment\":\"production\"}"
          echo "âœ… Production deployment complete"
